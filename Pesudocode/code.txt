// Definning required data structures...
STRUCTURE IDRoot
	DEFINE id AS STRING
	DEFINE root AS STRING
ENDSTRUCTURE


FUNCTION GetHierarchyParts
	INPUT
		⬤ item
			a string of a relative or absolute file system path
	OUTPUT
		⬤ parents
			a sequence (an array or a list) of item hierarchy in the file system
	DESCRIPTION
		A file system path of an item is a string containing the hierarchy of
		that item in the file system separated by a special character known as
		path separator. This function turns the string path into a sequence of
		hierarchical items.
        
	// Every framework or the community of that framework offers an API or a procedure that serves this purpose
	// for example in Python we can call pathlib.Path(item).parts
ENDFUNCTION



FUNCTION
	INPUT
		dir
			a string of fully-qualified name of a folder in the file system
	OUTPUT


	// Definning a flag...
	TO_DO_NOTHING    = 0x00
	TO_BREAK_UP_ITEM = 0x01
	TO_BREAK_UP_DIR  = 0x02

	dirParts ◀── CALL GetHierarchyParts WITH dir
	dirPartsIndex ◀── 0
	state ◀── TO_DO_NOTHING
	index ◀── 0
	currItem ◀── Get the root item of the tree view
	DO INDEFINITELT
		currItemParts ◀── CALL GetHierarchyParts WITH the text of currItem
		currItemPartsIndex ◀── 1

		DO INDEFINITELT
			LOOK FOR EXCEPTIONS
				IF dirParts[dirPartsIndex] = currParts[currPartsIndex] THEN
					INC dirPartsIndex
					INC currItemPartsIndex 
				ELSE
					state ◀── TO_BREAK_UP_ITEM ∨ TO_BREAK_UP_DIR
					index ◀── 0
					BREAK OUT OF this loop
				ENDIF
			EXCEPTION dirParts exhausted
				DEC dirPartsIndex
				DEC currItemPartsIndex
				IF currItemPartsIndex is the last index of currItemParts THEN
					// Not changing the initial value of TO_DO_NOTHING of state to indicate updating currItem...
					DD NOTHING
				ELSE
					state ◀── TO_BREAK_UP_ITEM
				ENDIF
				BREAK OUT OF outer loop
			EXCEPTION currItemParts exhausted
				BREAK OUT OF this loop
			ENDLOOK
		ENDDO

		// GetHierarchyPartsting an ordered list of all folder children of currItem...
		childrenList ◀── Create an empty ordered list
		FOR EVERY childID IN currItem DO
			IF childID is a folder THEN
				childIDRoot = NEW IDRoot(
					childID,
					first part of childID.text
				)
				Add childID to childrenList
			ENDIF
		ENDFOR

		index ◀── Search childrenList for dirParts[dirPartsIndex]
		IF index specifies dirParts[dirPartsIndex] is not in childrenList THEN
			state ◀── TO_BREAK_UP_DIR
			index ◀── GetHierarchyParts proper insertion position upon index
			BREAK OUT OF this loop
		ELSE
			currItem ◀── childrenList[index]
			INCREMENT dirPartsIndex
		ENDIF
	ENDWILE
ENDFUNCTION